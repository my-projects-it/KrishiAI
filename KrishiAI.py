import streamlit as st
import random
import datetime

# ------------------------------
# Page Config
# ------------------------------
st.set_page_config(
    page_title="KrishiAI - Smart Agriculture Assistant",
    page_icon="üåæü§ñ",
    layout="wide"
)

# ------------------------------
# Background Image + Animations CSS
# ------------------------------
st.markdown(
    """
    <style>
    /* Background Animation */
    body {
        background: linear-gradient(-45deg, #d4fcd6, #f0fff0, #e0ffe0, #c8f7c5);
        background-size: 400% 400%;
        animation: gradientBG 15s ease infinite;
    }
    @keyframes gradientBG {
        0% {background-position: 0% 50%;}
        50% {background-position: 100% 50%;}
        100% {background-position: 0% 50%;}
    }

    /* Main App Card */
    .stApp {
        background: rgba(255, 255, 255, 0.92);
        padding: 20px;
        border-radius: 15px;
        box-shadow: 0px 4px 20px rgba(0, 100, 0, 0.2);
    }

    /* Heading Color & Animation */
    h1, h2, h3, h4 {
        color: #006400 !important;
        text-shadow: 1px 1px 2px #99ff99;
        animation: fadeIn 2s ease-in;
    }
    @keyframes fadeIn {
        from {opacity: 0; transform: translateY(-20px);}
        to {opacity: 1; transform: translateY(0);}
    }

    /* Menu Buttons */
    .menu-button {
        background: linear-gradient(135deg, #66cc66, #339933);
        color: white;
        font-weight: bold;
        padding: 15px;
        border-radius: 12px;
        text-align: center;
        margin-bottom: 10px;
        cursor: pointer;
        box-shadow: 3px 3px 8px rgba(0,0,0,0.2);
        transition: all 0.3s ease;
    }
    .menu-button:hover {
        background: linear-gradient(135deg, #33cc33, #228822);
        transform: scale(1.08);
    }

    /* Text Fade-in Effect */
    .stMarkdown, .stText, .stAlert {
        animation: fadeIn 1.5s ease-in;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# ------------------------------
# App Title
# ------------------------------
st.title("üåæü§ñ KrishiAI - Smart Agriculture Assistant")
st.subheader("Your AI Assistant for Farming, Market, Weather & Citizen Help (‡§Ü‡§™‡§ï‡§æ ‡§ï‡•É‡§∑‡§ø AI ‡§∏‡§π‡§æ‡§Ø‡§ï)")

# ------------------------------
# AI Crop Advisory
# ------------------------------
def crop_advisory(soil, season):
    if soil == "Black Soil | ‡§ï‡§æ‡§≤‡•Ä ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä" and season == "Summer | ‡§ó‡§∞‡•ç‡§Æ‡•Ä":
        return "AI Suggestion (‡§∏‡•Å‡§ù‡§æ‡§µ): Soybean, Cotton, Maize (‡§∏‡•ã‡§Ø‡§æ‡§¨‡•Ä‡§®, ‡§ï‡§™‡§æ‡§∏, ‡§Æ‡§ï‡•ç‡§ï‡§æ)"
    elif soil == "Loamy Soil | ‡§¶‡•ã‡§Æ‡§ü ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä" and season == "Rainy | ‡§¨‡§∞‡§∏‡§æ‡§§":
        return "AI Suggestion (‡§∏‡•Å‡§ù‡§æ‡§µ): Rice, Sugarcane, Vegetables (‡§ß‡§æ‡§®, ‡§ó‡§®‡•ç‡§®‡§æ, ‡§∏‡§¨‡•ç‡§ú‡§ø‡§Ø‡§æ‡§Å)"
    elif soil == "Sandy Soil | ‡§∞‡•á‡§§‡•Ä‡§≤‡•Ä ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä" and season == "Winter | ‡§∏‡§∞‡•ç‡§¶‡•Ä":
        return "AI Suggestion (‡§∏‡•Å‡§ù‡§æ‡§µ): Wheat, Chickpea, Mustard (‡§ó‡•á‡§π‡•Ç‡§Å, ‡§ö‡§®‡§æ, ‡§∏‡§∞‡§∏‡•ã‡§Ç)"
    else:
        return "AI Suggestion (‡§∏‡•Å‡§ù‡§æ‡§µ): Consult local agriculture expert (‡§∏‡•ç‡§•‡§æ‡§®‡•Ä‡§Ø ‡§ï‡•É‡§∑‡§ø ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§∏‡•á ‡§∏‡§≤‡§æ‡§π ‡§≤‡•á‡§Ç)"

# ------------------------------
# AI Pest Diagnosis
# ------------------------------
def pest_diagnosis(symptom):
    symptom = symptom.lower()
    if "yellow" in symptom or "‡§™‡•Ä‡§≤‡•á" in symptom:
        return "AI Diagnosis (‡§®‡§ø‡§¶‡§æ‡§®): Nitrogen deficiency or Leaf Blight (‡§®‡§æ‡§á‡§ü‡•ç‡§∞‡•ã‡§ú‡§® ‡§ï‡§Æ‡•Ä / ‡§™‡§§‡•ç‡§§‡•Ä ‡§ù‡•Å‡§≤‡§∏‡§æ ‡§∞‡•ã‡§ó). Apply Urea (‡§Ø‡•Ç‡§∞‡§ø‡§Ø‡§æ ‡§ï‡§æ ‡§õ‡§ø‡§°‡§º‡§ï‡§æ‡§µ)."
    elif "insect" in symptom or "‡§ï‡•Ä‡§°‡§º‡•á" in symptom:
        return "AI Diagnosis (‡§®‡§ø‡§¶‡§æ‡§®): Pest attack (‡§ï‡•Ä‡§ü ‡§™‡•ç‡§∞‡§ï‡•ã‡§™). Use Neem Oil or Recommended Pesticide (‡§®‡•Ä‡§Æ ‡§§‡•á‡§≤ / ‡§ï‡•Ä‡§ü‡§®‡§æ‡§∂‡§ï)."
    elif "rot" in symptom or "‡§∏‡§°‡§º‡§®" in symptom:
        return "AI Diagnosis (‡§®‡§ø‡§¶‡§æ‡§®): Fungal Infection (‡§´‡§´‡•Ç‡§Ç‡§¶‡•Ä ‡§∏‡§Ç‡§ï‡•ç‡§∞‡§Æ‡§£). Apply Fungicide (‡§´‡§´‡•Ç‡§Ç‡§¶‡§®‡§æ‡§∂‡§ï)."
    else:
        return "AI Diagnosis (‡§®‡§ø‡§¶‡§æ‡§®): Upload photo for precise AI analysis (‡§∏‡§ü‡•Ä‡§ï ‡§®‡§ø‡§¶‡§æ‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§´‡•ã‡§ü‡•ã ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç)."

# ------------------------------
# Market Prices
# ------------------------------
base_prices = {
    "Wheat | ‡§ó‡•á‡§π‡•Ç‡§Å": 2200,
    "Rice | ‡§ß‡§æ‡§®": 1900,
    "Soybean | ‡§∏‡•ã‡§Ø‡§æ‡§¨‡•Ä‡§®": 4800,
    "Cotton | ‡§ï‡§™‡§æ‡§∏": 6200
}
def get_dynamic_prices():
    prices = {}
    for crop, base in base_prices.items():
        fluctuation = random.randint(-100, 100)
        prices[crop] = f"‚Çπ{base + fluctuation} / Quintal | ‡§ï‡•ç‡§µ‡§ø‡§Ç‡§ü‡§≤"
    return prices

# ------------------------------
# Weather Info
# --------
