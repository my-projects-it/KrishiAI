import streamlit as st
import random
import datetime

# ------------------------------
# Page Config
# ------------------------------
st.set_page_config(
    page_title="KrishiAI - Smart Agriculture Assistant",
    page_icon="ЁЯМ╛ЁЯдЦ",
    layout="wide"
)

# ------------------------------
# Language Toggle
# ------------------------------
st.sidebar.markdown("### ЁЯМР Language / рднрд╛рд╖рд╛")
language = st.sidebar.radio("", ["English", "рд╣рд┐рдиреНрджреА"])

# ------------------------------
# Text Dictionary
# ------------------------------
TEXT = {
    "English": {
        "home_title": "ЁЯМ╛ Welcome to KrishiAI",
        "home_sub": "Your Smart Agriculture Assistant",
        "home_info": """
        ЁЯЪЬ Helping Farmers & Citizens with:  
        ЁЯМ▒ AI-based Crop Advisory  
        ЁЯРЫ Pest & Disease Diagnosis  
        ЁЯТ░ Market Prices  
        ЁЯМжя╕П Weather Information  
        ЁЯУЭ Citizen Problem Reporting  
        ЁЯУ░ Daily Agriculture News & Events
        """,
        "menu": ["ЁЯПа Home", "ЁЯМ▒ AI Crop Advisory", "ЁЯРЫ AI Pest Diagnosis", "ЁЯТ░ AI Market Prices",
                 "ЁЯМжя╕П AI Weather Info", "ЁЯУЭ AI Citizen Help", "ЁЯУ░ Agriculture News & Events"],
        "soil": "Select Soil Type",
        "season": "Select Season",
        "get_suggestion": "Get AI Suggestion",
        "describe_problem": "Describe Problem",
        "get_diagnosis": "Get AI Diagnosis",
        "get_help": "Get AI Help",
        "complaint_draft": "ЁЯУД Complaint Draft",
        "helplines": "ЁЯУЮ Helplines: 100 (Police), 101 (Fire), 108 (Ambulance)",
        "last_updated": "тП░ Last updated"
    },
    "рд╣рд┐рдиреНрджреА": {
        "home_title": "ЁЯМ╛ рдХреГрд╖рд┐ AI рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ",
        "home_sub": "рдЖрдкрдХрд╛ рд╕реНрдорд╛рд░реНрдЯ рдХреГрд╖рд┐ рд╕рд╣рд╛рдпрдХ",
        "home_info": """
        ЁЯЪЬ рдХрд┐рд╕рд╛рдиреЛрдВ рдФрд░ рдирд╛рдЧрд░рд┐рдХреЛрдВ рдХреА рдорджрдж рдХреЗ рд▓рд┐рдП:  
        ЁЯМ▒ AI рдЖрдзрд╛рд░рд┐рдд рдлрд╕рд▓ рд╕рд▓рд╛рд╣  
        ЁЯРЫ рдХреАрдЯ/рд░реЛрдЧ рдирд┐рджрд╛рди  
        ЁЯТ░ рдордВрдбреА рднрд╛рд╡  
        ЁЯМжя╕П рдореМрд╕рдо рдЬрд╛рдирдХрд╛рд░реА  
        ЁЯУЭ рдирд╛рдЧрд░рд┐рдХ рд╕рдорд╕реНрдпрд╛ рд░рд┐рдкреЛрд░реНрдЯрд┐рдВрдЧ  
        ЁЯУ░ рдХреГрд╖рд┐ рд╕рдорд╛рдЪрд╛рд░ рдФрд░ рдШрдЯрдирд╛рдПрдБ
        """,
        "menu": ["ЁЯПа рд╣реЛрдо", "ЁЯМ▒ AI рдлрд╕рд▓ рд╕рд▓рд╛рд╣", "ЁЯРЫ AI рдХреАрдЯ/рд░реЛрдЧ рдирд┐рджрд╛рди", "ЁЯТ░ AI рдордВрдбреА рднрд╛рд╡",
                 "ЁЯМжя╕П AI рдореМрд╕рдо рдЬрд╛рдирдХрд╛рд░реА", "ЁЯУЭ AI рдирд╛рдЧрд░рд┐рдХ рд╕рд╣рд╛рдпрддрд╛", "ЁЯУ░ рдХреГрд╖рд┐ рд╕рдорд╛рдЪрд╛рд░"],
        "soil": "рдорд┐рдЯреНрдЯреА рдХрд╛ рдкреНрд░рдХрд╛рд░ рдЪреБрдиреЗрдВ",
        "season": "рдореМрд╕рдо рдЪреБрдиреЗрдВ",
        "get_suggestion": "AI рд╕рд▓рд╛рд╣ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ",
        "describe_problem": "рд╕рдорд╕реНрдпрд╛ рд▓рд┐рдЦреЗрдВ",
        "get_diagnosis": "AI рдирд┐рджрд╛рди рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ",
        "get_help": "AI рдорджрдж рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ",
        "complaint_draft": "ЁЯУД рд╢рд┐рдХрд╛рдпрдд рдХрд╛ рдкреНрд░рд╛рд░реВрдк",
        "helplines": "ЁЯУЮ рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди: 100 (рдкреБрд▓рд┐рд╕), 101 (рдлрд╛рдпрд░), 108 (рдПрдореНрдмреБрд▓реЗрдВрд╕)",
        "last_updated": "тП░ рдЕрдВрддрд┐рдо рдЕрдкрдбреЗрдЯ"
    }
}
txt = TEXT[language]

# ------------------------------
# Functions
# ------------------------------
def crop_advisory(soil, season):
    if soil in ["Black Soil", "рдХрд╛рд▓реА рдорд┐рдЯреНрдЯреА"] and season in ["Summer", "рдЧрд░реНрдореА"]:
        return "Soybean, Cotton, Maize"
    elif soil in ["Loamy Soil", "рджреЛрдордЯ рдорд┐рдЯреНрдЯреА"] and season in ["Rainy", "рдмрд░рд╕рд╛рдд"]:
        return "Rice, Sugarcane, Vegetables"
    elif soil in ["Sandy Soil", "рд░реЗрддреАрд▓реА рдорд┐рдЯреНрдЯреА"] and season in ["Winter", "рд╕рд░реНрджреА"]:
        return "Wheat, Chickpea, Mustard"
    else:
        return "Consult local agriculture expert"

def pest_diagnosis(symptom):
    symptom = symptom.lower()
    if "yellow" in symptom or "рдкреАрд▓реЗ" in symptom:
        return "Nitrogen deficiency or Leaf Blight"
    elif "insect" in symptom or "рдХреАрдбрд╝реЗ" in symptom:
        return "Pest attack. Use Neem Oil or pesticide"
    elif "rot" in symptom or "рд╕рдбрд╝рди" in symptom:
        return "Fungal infection. Apply fungicide"
    else:
        return "Upload photo for precise AI analysis"

base_prices = {"Wheat | рдЧреЗрд╣реВрдБ": 2200, "Rice | рдзрд╛рди": 1900, "Soybean | рд╕реЛрдпрд╛рдмреАрди": 4800, "Cotton | рдХрдкрд╛рд╕": 6200}
def get_dynamic_prices():
    prices = {}
    for crop, base in base_prices.items():
        fluctuation = random.randint(-100, 100)
        prices[crop] = f"тВ╣{base + fluctuation} / Quintal | рдХреНрд╡рд┐рдВрдЯрд▓"
    return prices

def get_weather():
    conditions = ["тШАя╕П Sunny | рдзреВрдк", "ЁЯМзя╕П Rainy | рдмрд╛рд░рд┐рд╢", "тЫЕ Partly Cloudy | рдЖрдВрд╢рд┐рдХ рдмрд╛рджрд▓", "ЁЯМкя╕П Windy | рддреЗрдЬрд╝ рд╣рд╡рд╛"]
    temp = random.randint(20, 40)
    return f"{random.choice(conditions)} | Temp: {temp}┬░C"

def classify_problem(problem):
    problem = problem.lower()
    if "road" in problem or "рдЧрдбреНрдврд╛" in problem:
        return "Public Works Department (PWD)"
    elif "electricity" in problem or "рдмрд┐рдЬрд▓реА" in problem:
        return "Electricity Board"
    elif "water" in problem or "рдкрд╛рдиреА" in problem:
        return "Jal Board"
    elif "hospital" in problem or "health" in problem:
        return "Health Department"
    elif "police" in problem or "рд╕реБрд░рдХреНрд╖рд╛" in problem:
        return "Police Department"
    else:
        return "Municipal Corporation"

def generate_complaint(problem, dept):
    return f"""
To,
{dept}

Subject: Complaint regarding public issue

Respected Sir/Madam,
Problem: {problem}
Kindly take immediate action.

рдзрдиреНрдпрд╡рд╛рдж,
Citizen
"""

def agriculture_news():
    news_list = [
        "PM Kisan 21st Installment likely in Nov-Dec 2025. [Govt Link](https://pmkisan.gov.in/)",
        "GST rates reduced for agricultural products. [News Link](https://newsonair.gov.in/)",
        "eNAM portal updated with new crops. [eNAM Portal](https://www.enam.gov.in/)",
        "Weather Alert: Heavy rainfall expected. [IMD](https://mausam.imd.gov.in/)",
        "Agri Ministry announces new subsidy for solar pumps. [Agri Ministry](https://agricoop.nic.in/)"
    ]
    for news in news_list:
        st.write("ЁЯУ░ " + news)

# ------------------------------
# Sidebar Navigation
# ------------------------------
menu = st.sidebar.radio("ЁЯУМ Navigation", txt["menu"])

# ------------------------------
# Pages
# ------------------------------
if menu == txt["menu"][0]:  # Home
    st.markdown(
        """
        <style>
        .stApp {
            background-image: url("https://images.unsplash.com/photo-1600423115367-5df9c3b7f1d7?auto=format&fit=crop&w=1600&q=80");
            background-size: cover;
            background-position: center;
            background-attachment: fixed;
            color: #003300;
        }
        .overlay {
            background: rgba(255, 255, 255, 0.85);
            padding: 25px;
            border-radius: 12px;
        }
        </style>
        """, unsafe_allow_html=True
    )
    st.markdown(f"<div class='overlay'><h1>{txt['home_title']}</h1><h3>{txt['home_sub']}</h3><p>{txt['home_info']}</p></div>", unsafe_allow_html=True)

elif menu == txt["menu"][1]:
    st.header(txt["menu"][1])
    soil = st.selectbox(txt["soil"], ["Black Soil | рдХрд╛рд▓реА рдорд┐рдЯреНрдЯреА", "Loamy Soil | рджреЛрдордЯ рдорд┐рдЯреНрдЯреА", "Sandy Soil | рд░реЗрддреАрд▓реА рдорд┐рдЯреНрдЯреА"])
    season = st.selectbox(txt["season"], ["Summer | рдЧрд░реНрдореА", "Rainy | рдмрд░рд╕рд╛рдд", "Winter | рд╕рд░реНрджреА"])
    if st.button(txt["get_suggestion"]):
        st.success(crop_advisory(soil, season))

elif menu == txt["menu"][2]:
    st.header(txt["menu"][2])
    symptom = st.text_area(txt["describe_problem"])
    if st.button(txt["get_diagnosis"]):
        st.info(pest_diagnosis(symptom))

elif menu == txt["menu"][3]:
    st.header(txt["menu"][3])
    prices = get_dynamic_prices()
    for crop, price in prices.items():
        st.write(f"ЁЯСЙ {crop}: {price}")
    st.caption(f"{txt['last_updated']}: {datetime.datetime.now().strftime('%H:%M:%S')}")

elif menu == txt["menu"][4]:
    st.header(txt["menu"][4])
    st.success(get_weather())
    st.caption(f"{txt['last_updated']}: {datetime.datetime.now().strftime('%H:%M:%S')}")

elif menu == txt["menu"][5]:
    st.header(txt["menu"][5])
    problem = st.text_area(txt["describe_problem"])
    if st.button(txt["get_help"]):
        if problem.strip():
            dept = classify_problem(problem)
            st.success(f"тЬЕ Responsible Department: {dept}")
            st.text_area(txt["complaint_draft"], generate_complaint(problem, dept), height=250)
            st.info(txt["helplines"])
        else:
            st.warning("тЪая╕П Please enter a problem")

elif menu == txt["menu"][6]:
    st.header(txt["menu"][6])
    agriculture_news()
