import streamlit as st
import random
import datetime

# ------------------------------
# Page Config
# ------------------------------
st.set_page_config(
    page_title="KrishiAI - Smart Agriculture Assistant",
    page_icon="ЁЯМ╛ЁЯдЦ",
    layout="wide"
)

# ------------------------------
# Background Image + CSS
# ------------------------------
st.markdown(
    """
    <style>
    body {
        background-image: url("https://images.unsplash.com/photo-1501004318641-b39e6451bec6?auto=format&fit=crop&w=1600&q=80");
        background-size: cover;
        background-attachment: fixed;
        color: #004d00;
    }
    .stApp {
        background: rgba(255, 255, 255, 0.88);
        padding: 20px;
        border-radius: 10px;
    }
    h1, h2, h3, h4 {
        color: #006600;
    }
    .menu-button {
        background-color: #66cc66;
        color: white;
        font-weight: bold;
        padding: 15px;
        border-radius: 12px;
        text-align: center;
        margin-bottom: 10px;
        cursor: pointer;
        box-shadow: 2px 2px 5px grey;
        transition: all 0.3s ease;
    }
    .menu-button:hover {
        background-color: #339933;
        transform: scale(1.05);
    }
    </style>
    """,
    unsafe_allow_html=True
)

# ------------------------------
# App Title
# ------------------------------
st.title("ЁЯМ╛ЁЯдЦ KrishiAI - Smart Agriculture Assistant")
st.subheader("Your AI Assistant for Farming, Market, Weather & Citizen Help (рдЖрдкрдХрд╛ рдХреГрд╖рд┐ AI рд╕рд╣рд╛рдпрдХ)")

# ------------------------------
# Functions
# ------------------------------
def crop_advisory(soil, season):
    if soil == "Black Soil | рдХрд╛рд▓реА рдорд┐рдЯреНрдЯреА" and season == "Summer | рдЧрд░реНрдореА":
        return "AI Suggestion (рд╕реБрдЭрд╛рд╡): Soybean, Cotton, Maize (рд╕реЛрдпрд╛рдмреАрди, рдХрдкрд╛рд╕, рдордХреНрдХрд╛)"
    elif soil == "Loamy Soil | рджреЛрдордЯ рдорд┐рдЯреНрдЯреА" and season == "Rainy | рдмрд░рд╕рд╛рдд":
        return "AI Suggestion (рд╕реБрдЭрд╛рд╡): Rice, Sugarcane, Vegetables (рдзрд╛рди, рдЧрдиреНрдирд╛, рд╕рдмреНрдЬрд┐рдпрд╛рдБ)"
    elif soil == "Sandy Soil | рд░реЗрддреАрд▓реА рдорд┐рдЯреНрдЯреА" and season == "Winter | рд╕рд░реНрджреА":
        return "AI Suggestion (рд╕реБрдЭрд╛рд╡): Wheat, Chickpea, Mustard (рдЧреЗрд╣реВрдБ, рдЪрдирд╛, рд╕рд░рд╕реЛрдВ)"
    else:
        return "AI Suggestion (рд╕реБрдЭрд╛рд╡): Consult local agriculture expert (рд╕реНрдерд╛рдиреАрдп рдХреГрд╖рд┐ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рд╕реЗ рд╕рд▓рд╛рд╣ рд▓реЗрдВ)"

def pest_diagnosis(symptom):
    symptom = symptom.lower()
    if "yellow" in symptom or "рдкреАрд▓реЗ" in symptom:
        return "AI Diagnosis (рдирд┐рджрд╛рди): Nitrogen deficiency or Leaf Blight. Apply Urea."
    elif "insect" in symptom or "рдХреАрдбрд╝реЗ" in symptom:
        return "AI Diagnosis (рдирд┐рджрд╛рди): Pest attack. Use Neem Oil or Recommended Pesticide."
    elif "rot" in symptom or "рд╕рдбрд╝рди" in symptom:
        return "AI Diagnosis (рдирд┐рджрд╛рди): Fungal Infection. Apply Fungicide."
    else:
        return "AI Diagnosis (рдирд┐рджрд╛рди): Upload photo for precise AI analysis."

base_prices = {
    "Wheat | рдЧреЗрд╣реВрдБ": 2200,
    "Rice | рдзрд╛рди": 1900,
    "Soybean | рд╕реЛрдпрд╛рдмреАрди": 4800,
    "Cotton | рдХрдкрд╛рд╕": 6200
}
def get_dynamic_prices():
    prices = {}
    for crop, base in base_prices.items():
        fluctuation = random.randint(-100, 100)
        prices[crop] = f"тВ╣{base + fluctuation} / Quintal | рдХреНрд╡рд┐рдВрдЯрд▓"
    return prices

def get_weather():
    conditions = ["тШАя╕П Sunny | рдзреВрдк", "ЁЯМзя╕П Rainy | рдмрд╛рд░рд┐рд╢", "тЫЕ Partly Cloudy | рдЖрдВрд╢рд┐рдХ рдмрд╛рджрд▓", "ЁЯМкя╕П Windy | рддреЗрдЬрд╝ рд╣рд╡рд╛"]
    temp = random.randint(20, 40)
    condition = random.choice(conditions)
    return f"{condition} | Temp: {temp}┬░C | рддрд╛рдкрдорд╛рди: {temp}┬░C"

def classify_problem(problem):
    problem = problem.lower()
    if "road" in problem or "рдЧрдбреНрдврд╛" in problem:
        return "Public Works Department (PWD) | рд▓реЛрдХ рдирд┐рд░реНрдорд╛рдг рд╡рд┐рднрд╛рдЧ"
    elif "electricity" in problem or "рдмрд┐рдЬрд▓реА" in problem:
        return "Electricity Board | рд╡рд┐рджреНрдпреБрдд рд╡рд┐рднрд╛рдЧ"
    elif "water" in problem or "рдкрд╛рдиреА" in problem:
        return "Jal Board | рдЬрд▓ рд╡рд┐рднрд╛рдЧ"
    elif "hospital" in problem or "health" in problem or "рдЕрд╕реНрдкрддрд╛рд▓" in problem:
        return "Health Department | рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╡рд┐рднрд╛рдЧ"
    elif "police" in problem or "рд╕реБрд░рдХреНрд╖рд╛" in problem:
        return "Police Department | рдкреБрд▓рд┐рд╕ рд╡рд┐рднрд╛рдЧ"
    else:
        return "Municipal Corporation | рдирдЧрд░ рдирд┐рдЧрдо"

def generate_complaint(problem, dept):
    return f"""
To,
{dept}

Subject: Complaint regarding public issue

Respected Sir/Madam,
Problem: {problem}
I request you to kindly take immediate action.

рдзрдиреНрдпрд╡рд╛рдж,
Citizen
"""

def agriculture_news():
    news_list = [
        "PM Kisan 21st Installment likely in Nov-Dec 2025. [Govt Link](https://pmkisan.gov.in/)",
        "GST rates reduced for agricultural products. [News Link](https://newsonair.gov.in/)",
        "eNAM portal updated with new crops. [eNAM Portal](https://www.enam.gov.in/)",
        "Weather Alert: Heavy rainfall expected. [IMD](https://mausam.imd.gov.in/)",
        "Agri Ministry announces new subsidy for solar pumps. [Agri Ministry](https://agricoop.nic.in/)"
    ]
    for news in news_list:
        st.write("ЁЯУ░ " + news)

# ------------------------------
# Menu Selection
# ------------------------------
st.sidebar.title("ЁЯУМ Navigation (рдиреЗрд╡рд┐рдЧреЗрд╢рди)")
menu = st.sidebar.radio(
    "Go to (рдЬрд╛рдПрдБ)", 
    ["ЁЯПа Home | рд╣реЛрдо", "ЁЯМ▒ AI Crop Advisory", "ЁЯРЫ AI Pest Diagnosis", "ЁЯТ░ AI Market Prices", 
     "ЁЯМжя╕П AI Weather Info", "ЁЯУЭ AI Citizen Help", "ЁЯУ░ Agriculture News & Events"]
)

# ------------------------------
# Home Page
# ------------------------------
if menu == "ЁЯПа Home | рд╣реЛрдо":
    st.header("ЁЯМ┐ Welcome to KrishiAI (рдХреГрд╖рд┐ AI рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ)")
    st.markdown("""
    ### ЁЯЪЬ About the App | рдРрдк рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ  
    KrishiAI is your **Smart Agriculture Assistant** to help farmers & citizens with:  
    - ЁЯМ▒ AI-based Crop Advisory  
    - ЁЯРЫ Pest & Disease Diagnosis  
    - ЁЯТ░ Market Prices (рдордВрдбреА рднрд╛рд╡)  
    - ЁЯМжя╕П Weather Information  
    - ЁЯУЭ Citizen Problem Reporting  
    - ЁЯУ░ Daily Agriculture News & Events  

    ---
    ЁЯСЙ Select features from the **left menu** to explore (рдмрд╛рдПрдБ рдореЗрдиреНрдпреВ рд╕реЗ рдлреАрдЪрд░ рдЪреБрдиреЗрдВ).
    """)

# ------------------------------
# Crop Advisory
# ------------------------------
elif menu == "ЁЯМ▒ AI Crop Advisory":
    st.header("ЁЯМ▒ AI Crop Suggestion (рдлрд╕рд▓ рд╕рд▓рд╛рд╣)")
    soil = st.selectbox("Select Soil Type", ["Black Soil | рдХрд╛рд▓реА рдорд┐рдЯреНрдЯреА", "Loamy Soil | рджреЛрдордЯ рдорд┐рдЯреНрдЯреА", "Sandy Soil | рд░реЗрддреАрд▓реА рдорд┐рдЯреНрдЯреА"])
    season = st.selectbox("Select Season", ["Summer | рдЧрд░реНрдореА", "Rainy | рдмрд░рд╕рд╛рдд", "Winter | рд╕рд░реНрджреА"])
    if st.button("Get AI Suggestion"):
        st.success(crop_advisory(soil, season))

# ------------------------------
# Pest Diagnosis
# ------------------------------
elif menu == "ЁЯРЫ AI Pest Diagnosis":
    st.header("ЁЯРЫ AI Pest & Disease Diagnosis (рдХреАрдЯ/рд░реЛрдЧ рдирд┐рджрд╛рди)")
    symptom = st.text_area("Describe Problem")
    if st.button("Get AI Diagnosis"):
        st.info(pest_diagnosis(symptom))

# ------------------------------
# Market Prices
# ------------------------------
elif menu == "ЁЯТ░ AI Market Prices":
    st.header("ЁЯТ░ AI Powered Market Prices (рдордВрдбреА рднрд╛рд╡)")
    prices = get_dynamic_prices()
    for crop, price in prices.items():
        st.write(f"ЁЯСЙ {crop}: {price}")
    st.caption(f"тП░ Last updated: {datetime.datetime.now().strftime('%H:%M:%S')}")

# ------------------------------
# Weather Info
# ------------------------------
elif menu == "ЁЯМжя╕П AI Weather Info":
    st.header("ЁЯМжя╕П AI Weather Update (рдореМрд╕рдо рдЬрд╛рдирдХрд╛рд░реА)")
    st.success(get_weather())
    st.caption(f"тП░ Last updated: {datetime.datetime.now().strftime('%H:%M:%S')}")

# ------------------------------
# Citizen Help
# ------------------------------
elif menu == "ЁЯУЭ AI Citizen Help":
    st.header("ЁЯУЭ AI Citizen Problem Reporting (рдирд╛рдЧрд░рд┐рдХ рд╢рд┐рдХрд╛рдпрдд)")
    problem = st.text_area("Describe your problem")
    if st.button("Get AI Help"):
        if problem.strip() == "":
            st.warning("Please enter a problem")
        else:
            dept = classify_problem(problem)
            st.success(f"тЬЕ Responsible Department: {dept}")
            st.text_area("ЁЯУД Complaint Draft", generate_complaint(problem, dept), height=250)
            st.info("ЁЯУЮ Helplines: 100 (Police), 101 (Fire), 108 (Ambulance)")

# ------------------------------
# News & Events
# ------------------------------
elif menu == "ЁЯУ░ Agriculture News & Events":
    st.header("ЁЯУ░ Agriculture News & Events (рдХреГрд╖рд┐ рд╕рдорд╛рдЪрд╛рд░)")
    agriculture_news()
